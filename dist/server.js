//__HEAD__
var Re=Object.create,M=Object.defineProperty,Me=Object.getPrototypeOf,Oe=Object.prototype.hasOwnProperty,je=Object.getOwnPropertyNames,Fe=Object.getOwnPropertyDescriptor;var He=r=>M(r,"__esModule",{value:!0});var Ae=(r,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of je(e))!Oe.call(r,s)&&s!=="default"&&M(r,s,{get:()=>e[s],enumerable:!(t=Fe(e,s))||t.enumerable});return r},d=r=>Ae(He(M(r!=null?Re(Me(r)):{},"default",r&&r.__esModule&&"default"in r?{get:()=>r.default,enumerable:!0}:{value:r,enumerable:!0})),r);function O(r){let e;return r?(e=r.toIterable)?e.call(r):r:[]}var Ke=Symbol.for("#__initor__"),Qe=Symbol.for("#__inited__"),Xe=Symbol.for("#type"),Ye=Symbol.for("#__listeners__");function E(r,e=null){let t={},s=/\$\$\d+\$\$/,i=function(n){return t[n]||(t[n]=e?e(n):{})},o=function(n,a){if(typeof a=="string"){if(a[0]=="$"&&s.test(a))return i(a)}else if(typeof n=="string"&&n[0]=="$"&&s.test(n)){let h=i(n);return Object.assign(h,a),h}return a};return JSON.parse(r,o)}function L(r,e){var t,s,i,o;let l={},n={added:[],changed:[],removed:[],all:[],urls:{}};if(r.assets)for(let a=0,h=O(r.assets),f=h.length;a<f;a++){let u=h[a],p=u.originalPath||u.path;l[p]=u,u.url&&((t=e.urls)[s=u.url]||(t[s]=u))}for(let a=0,h=O(e.assets||[]),f=h.length;a<f;a++){let u=h[a],p=u.originalPath||u.path,g=l[p];u.url&&r.urls&&(r.urls[u.url]=u),g?(g.hash!=u.hash&&(g.invalidated=Date.now(),g.replacedBy=u,u.replaces=g,n.changed.push(u),n.all.push(u),g==r.main&&(n.main=u)),i=l[p],delete l[p]):(n.added.push(u),n.all.push(u))}for(let a=0,h=Object.keys(l),f=h.length,u,p;a<f;a++)u=h[a],p=l[u],p.removed=Date.now(),n.all.push(p);for(let a=0,h=O(n.all),f=h.length;a<f;a++){let u=h[a];(n[o=u.type]||(n[o]=[])).push(u)}return n.removed=Object.values(l),e.changes=n,e}var N=d(require("events")),x=d(require("fs")),y=d(require("path"));var z=Symbol.for("#__initor__"),J=Symbol.for("#__inited__"),Ie=Symbol.for("#refresh"),U=Symbol.for("#__init__"),j=Symbol.for("#manifest"),W=Symbol.for("#absPath"),F=Symbol.for("#raw"),V=Symbol.for("#watch"),G=Symbol(),K=class{constructor(e){this[j]=e}get absPath(){return this[W]||(this[W]=this[j].resolve(this))}get name(){return y.default.basename(this.path)}get body(){return this.readSync()}readSync(){return x.default.readFileSync(this.absPath,"utf-8")}pipe(e){return x.default.createReadStream(this.absPath).pipe(e)}toString(){return this.url||this.absPath}},Q=class extends N.EventEmitter{static[U](){return this.prototype[z]=G,this}constructor(e={}){var t;super();t=this,this.options=e,this.data={},this.path=e.path,this.refs={},t.reviver=function(s){return new K(t)},t.init(e.data),this[z]===G&&this[J]&&this[J]()}get srcdir(){return y.default.resolve(y.default.dirname(this.path),this.data.srcdir)}get outdir(){return y.default.resolve(y.default.dirname(this.path),this.data.outdir)}get changes(){return this.data.changes||{}}get inputs(){return this.data.inputs}get outputs(){return this.data.outputs}get assets(){return this.data.assets}get urls(){return this.data.urls||{}}get main(){return this.data.main}get cwd(){return process.cwd()}get raw(){return this.data[F]}resolve(e){return e._=="input"?y.default.resolve(this.srcdir||this.cwd,e.path):e._=="output"?y.default.resolve(this.outdir,e.path):y.default.resolve(this.cwd,e.path||e)}resolveAssetPath(e){return y.default.resolve(this.outdir,e)}read(e){return x.default.readFileSync(this.resolve(e),"utf-8")}loadFromFile(e){return x.default.existsSync(e)?x.default.readFileSync(e,"utf-8"):"{}"}init(e=null){return(e||this.path)&&this.update(e),this}update(e){if(e==null&&(this.path?e=this.loadFromFile(this.path):console.warn("cannot update manifest without path")),typeof e=="string"){let t=e;e=E(e,this.reviver),e[F]=t}return this.data=L(this.data||{},e),this.data.changes.all.length&&this.emit("change",this.diff,this),this.data.changes.main&&this.emit("change:main",this.data.main,this),this.data.changes}serializeForBrowser(){return this.data[F]}[Ie](e){return!0}watch(){var e=this;if(this[V]!=!0?(this[V]=!0,!0):!1)return e.path&&!process.env.IMBA_HMR&&x.default.watch(this.path,function(t,s){let i=x.default.existsSync(e.path),o=i&&x.default.statSync(e.path);i&&e.update()})}on(e,t){return this.watch(),super.on(...arguments)}};Q[U]();var X=class{static for(e){return new Proxy({},new this(e))}constructor(e){this.getter=e}get target(){return this.getter()}get(e,t){return this.target[t]}set(e,t,s){return this.target[t]=s,!0}},c=X.for(function(){return globalThis[j]});var A=d(require("cluster")),v=d(require("fs")),B=d(require("path")),ie=d(require("events"));var H=d(require("perf_hooks")),S=Symbol.for("#spinner"),rt=Symbol.for("#__initor__"),st=Symbol.for("#__inited__"),De=Symbol.for("#ctime"),Y=Symbol.for("#IMBA_OPTIONS"),$e={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},b={bold:function(r){return"[1m"+r+"[22m"},red:function(r){return"[31m"+r+"[39m"},green:function(r){return"[32m"+r+"[39m"},yellow:function(r){return"[33m"+r+"[39m"},blue:function(r){return"[94m"+r+"[39m"},gray:function(r){return"[90m"+r+"[39m"},white:function(r){return"[37m"+r+"[39m"},f:function(r,e){let t=$e[r];return"["+t[0]+"m"+e+"["+t[1]+"m"}};b.warn=b.yellow;b.error=b.red;var C=process.platform!=="win32"||process.env.CI||process.env.TERM==="xterm-256color",ke={info:b.f("yellowBright",C?"\u2139":"i"),success:b.green(C?"\u2714":"\u221A"),warning:b.yellow(C?"\u26A0":"!!"),error:b.red(C?"\xD7":"\u2716"),debug:b.blue(C?"\u2139":"i")},Z=["debug","info","success","warning","error","silent"],Ee={"-1":"socket","4":"ip4","6":"ip6"};function Le(r){let e=b.f;return r=r.replace(/https?\:[^\s\n\)\]]+/g,function(t){return e("blueBright",t)}),r=r.replace(/^[\t\s]*\>[^\n]+/gm,function(t){return e("bold",t)}),r=r.replace(/\t/g,"  "),r=r.replace(/^/gm,"  "),r}function q(r,...e){let t=b.f;return r=r.replace(/\%([\w\.]+)/g,function(s,i){let o=e.shift();if(i=="markdown")return Le(o);if(i=="kb")return t("dim",(o/1e3).toFixed(1)+"kb");if(i=="path"||i=="bold")return t("bold",o);if(i=="dim")return t("dim",o);if(i=="address"){let l=Ee[o.addressType];return o.port?t("blueBright",[o.address||"http://127.0.0.1",o.port].join(":")):t("blueBright",l)}else{if(i=="ms")return t("yellow",Math.round(o)+"ms");if(i=="d")return t("blueBright",o);if(i=="red")return t("redBright",o);if(i=="green")return t("greenBright",o);if(i=="yellow")return t("yellowBright",o);if(i=="ref")return t("yellowBright","#"+(o.id||o));if(i=="elapsed"){o!=null&&e.unshift(o);let l=H.performance.now();return t("yellow",Math.round(l)+"ms")}else if(i=="heap"){o!=null&&e.unshift(o);let l=process.memoryUsage().heapUsed/1024/1024;return t("yellow",l.toFixed(2)+"mb")}else return o}}),[r,...e]}var ee=null,te=null,re=class{static get main(){return te||(te=new this)}constructor({prefix:e=null,loglevel:t}={}){this[De]=Date.now(),this.prefix=e?q(...e)[0]:"",this.loglevel=t||process.env.IMBA_LOGLEVEL||globalThis[Y]&&globalThis[Y].loglevel||"info"}write(e,...t){if(Z.indexOf(e)<Z.indexOf(this.loglevel))return this;let s=ke[e]||e,[i,...o]=q(...t);return this.prefix&&(i=this.prefix+i),this[S]&&this[S].isSpinning?(e=="success"&&(this[S].clear(),console.log(s+" "+i,...o),this[S].frame()),this[S].text=i):console.log(s+" "+i,...o)}debug(...e){return this.write("debug",...e)}log(...e){return this.write("info",...e)}info(...e){return this.write("info",...e)}warn(...e){return this.write("warn",...e)}error(...e){return this.write("error",...e)}success(...e){return this.write("success",...e)}ts(...e){return this.write("debug",...e,H.performance.now())}spinner(){}get[S](){return ee}get proxy(){var e=this;let t=function(...s){return e.info(...s)};return t.info=e.info.bind(e),t.warn=e.warn.bind(e),t.error=e.error.bind(e),t.debug=e.debug.bind(e),t.success=e.success.bind(e),t.ts=e.ts.bind(e),t.logger=e,t}async time(e,t){let s=Date.now();if(t){let i=await t();return this.info(""+e+" %ms",Date.now()-s),i}}},se=new re().proxy;var Ne=d(require("module")),ne=d(require("http")),lt=d(require("https")),oe=d(require("http2"));function m(r){let e;return r?(e=r.toIterable)?e.call(r):r:[]}var le=Symbol.for("#setup"),ae=Symbol.for("#__initor__"),ue=Symbol.for("#__inited__"),he=Symbol.for("#__init__"),fe=Symbol.for("#setup?"),ce=Symbol.for("#watch"),ze=Symbol.for("#dom"),Je=Symbol.for("#server"),Ue=Symbol.for("#raw"),pe=Symbol(),I={html:{"Content-Type":"text/html"},js:{"Content-Type":"text/javascript"},mjs:{"Content-Type":"text/javascript"},json:{"Content-Type":"application/json"},css:{"Content-Type":"text/css"},otf:{"Content-Type":"font/otf"},ttf:{"Content-Type":"font/ttf"},woff:{"Content-Type":"font/woff"},woff2:{"Content-Type":"font/woff2"},svg:{"Content-Type":"image/svg+xml"},avif:{"Content-Type":"image/avif"},gif:{"Content-Type":"image/gif"},png:{"Content-Type":"image/png"},apng:{"Content-Type":"image/apng"},webp:{"Content-Type":"image/webp"},jpg:{"Content-Type":"image/jpeg"},jpeg:{"Content-Type":"image/jpeg"}},w=globalThis.process,de=class extends Set{call(e,...t){var s;s=[];for(let i of m(this))s.push(i[e](...t));return s}close(e={}){var t;t=[];for(let s of m(this))t.push(s.close(e));return t}reload(e={}){var t;t=[];for(let s of m(this))t.push(s.reload(e));return t}broadcast(e,...t){var s;s=[];for(let i of m(this))s.push(i.broadcast(e,...t));return s}emit(e,t){var s;s=[];for(let i of m(this))s.push(i.emit(e,t));return s}},T=new de,me=new(class extends ie.EventEmitter{static[he](){return this.prototype[ae]=pe,this}constructor(){var e;super(...arguments);e=this,this.autoreload=!1,this.state={},A.default.isWorker&&w.on("message",function(t){if(e.emit("message",t),t[0]=="emit")return e.emit(...t.slice(1))}),this[ae]===pe&&this[ue]&&this[ue]()}[le](){var e=this;if(!!(this[fe]!=!0?(this[fe]=!0,!0):!1))return e.on("reloading",function(t){var s;console.log("is reloading - from outside"),e.state.reloading=!0,s=[];for(let i of m(T))s.push(i.pause());return s}),e.on("reloaded",async function(t){var s;e.state.reloaded=!0,console.log("is reloaded - from outside"),s=[];for(let o of m(T))s.push(o.close());let i=s;return await Promise.all(i),w.exit(0)}),e.on("manifest:change",function(t){if(w.env.IMBA_HMR)return c.update(t)}),e.on("manifest:error",function(t){if(w.env.IMBA_HMR)return c.errors=t,T.broadcast("errors",c.errors)}),!0}send(e){if(w.send instanceof Function)return w.send(e)}on(e,t){return e=="change"&&this.watch(),super.on(...arguments)}watch(){var e=this;if(this[ce]!=!0?(this[ce]=!0,!0):!1)return c.on("change:main",function(){return e.emit("change",c)})}reload(){if(!(this.isReloading!=!0?(this.isReloading=!0,!0):!1))return this;if(this.state.reloading=!0,!w.env.IMBA_SERVE){console.warn("not possible to gracefully reload servers not started via imba start");return}this.send("reload")}}[he]()),ge=class{constructor(e,t={}){this.url=e,[this.path,this.query]=e.split("?"),this.ext=B.default.extname(this.path),this.headers={"Content-Type":"text/plain","Access-Control-Allow-Origin":"*","cache-control":"public"},Object.assign(this.headers,I[this.ext.slice(1)]||{})}respond(e,t){let s=c.urls[this.url],i=this.headers,o=s?c.resolve(s):c.resolveAssetPath("public"+this.path);if(!o)return console.log("found no path for",s,this.url),t.writeHead(404,{}),t.end();if(s&&(s.ttl>0&&(i["cache-control"]="max-age="+s.ttl),s.imports)){let l=[];for(let n=0,a=m(s.imports),h=a.length;n<h;n++){let f=a[n];l.push("<"+f.url+">; rel=modulepreload; as=script")}i.Link=l.join(", ")}return v.default.access(o,v.default.constants.R_OK,function(l){if(l)return console.log("could not find path",o),t.writeHead(404,{}),t.end();try{let n=v.default.createReadStream(o);return t.writeHead(200,i),n.pipe(t)}catch(n){return t.writeHead(503,{}),t.end()}})}createReadStream(){return v.default.createReadStream(this.path)}pipe(e){return this.createReadStream().pipe(e)}},_e=class{static wrap(e,t={}){return new this(e,t)}constructor(e,t){var s=this;T.add(this),this.id=Math.random(),this.options=t,this.closed=!1,this.paused=!1,this.server=e,this.clients=new Set,this.stalledResponses=[],this.assetResponders={},w.env.IMBA_PATH&&(this.devtoolsPath=B.default.resolve(w.env.IMBA_PATH,"dist","hmr.js")),this.scheme=e instanceof ne.default.Server?"http":"https";let i=this.server._events.request,o=globalThis[ze];e.off("request",i),i[Je]=this,e.on("listening",function(){let l=s.server.address(),n=l.address;(n=="::"||n=="0.0.0.0")&&(n="localhost");let a=""+s.scheme+"://"+n+":"+l.port+"/";return se.info("listening on %bold",a)}),c.on("change",function(l,n){return s.broadcast("manifest",n.data[Ue])}),s.handler=function(l,n){var a;let h=l instanceof oe.Http2ServerRequest,f=l.url,u="/__assets__/";if(s.paused||s.closed)return n.statusCode=302,n.setHeader("Location",l.url),h||n.setHeader("Connection","close"),s.closed?(h&&l.stream.session.close(),n.end()):s.stalledResponses.push(n);if(f=="/__hmr__.js"&&s.devtoolsPath){let _=v.default.createReadStream(s.devtoolsPath);return n.writeHead(200,I.js),_.pipe(n)}if(f=="/__hmr__"){let _={"Content-Type":"text/event-stream","Cache-Control":"no-cache"};return h||(_.Connection="keep-alive"),n.writeHead(200,_),s.clients.add(n),s.broadcast("init",c.serializeForBrowser(),[n]),l.on("close",function(){return s.clients.delete(n)}),!0}if(f.indexOf(u)==0||c.urls[f])return((a=s.assetResponders)[f]||(a[f]=new ge(f,s))).respond(l,n);let p=l.headers,g;if(h?g=p[":scheme"]+"://"+p[":authority"]:g=(l.connection.encrypted?"https":"http")+"://"+p.host,t.static){let _=new URL(f,g),Ce=B.default.extname(_.pathname),D=I[Ce.slice(1)];if(D){let $=B.default.resolve(c.cwd,"."+_.pathname);if(v.default.existsSync($)){v.default.readFile($,function(k,Be){return k?(n.writeHead(500,{}),n.write("Error getting the file: "+k)):(n.writeHead(200,D),n.end(Be))});return}}}if(o){let _=new o.Location(l.url,g);return o.Document.create({location:_},function(){return i(l,n)})}else return i(l,n)},e.on("request",s.handler),e.on("close",function(){return console.log("server is closing!!!")}),A.default.isWorker&&(me[le](),me.send("serve"))}broadcast(e,t={},s=this.clients){t=JSON.stringify(t);let i="data: "+t+`


`;for(let o of m(s))o.write("event: "+e+`
`),o.write(`id: imba
`),o.write(i);return this}pause(){return(this.paused!=!0?(this.paused=!0,!0):!1)&&this.broadcast("paused"),this}resume(){if(this.paused!=!1?(this.paused=!1,!0):!1)return this.broadcast("resumed"),this.flushStalledResponses()}flushStalledResponses(){for(let e=0,t=m(this.stalledResponses),s=t.length;e<s;e++)t[e].end();return this.stalledResponses=[]}close(){var e=this;return this.pause(),new Promise(function(t){return e.closed=!0,e.server.close(t),e.flushStalledResponses()})}};function be(r,...e){return _e.wrap(r,...e)}var ct=Symbol.for("#__initor__"),pt=Symbol.for("#__inited__"),ye=Symbol.for("#__init__"),we=Symbol.for("#warned"),P=Symbol.for("#asset"),R=class{static wrap(e){let t=new R(e);return new Proxy(t,t)}constructor(e){this.meta=e}get input(){return c.inputs[this.meta.input]}get asset(){return globalThis._MF_?this.meta:this.input?this.input.asset:null}set(e,t,s){return!0}get(e,t){return this.meta.meta&&this.meta.meta[t]!=null?this.meta.meta[t]:this.asset?t=="absPath"&&!this.asset.absPath?this.asset.url:this.asset[t]:((this.meta[we]!=!0?(this.meta[we]=!0,!0):!1)&&console.warn("Asset for '"+this.meta.input+"' not found"),t=="valueOf"?function(){return""}:null)}},xe=class{constructor(e=null){this[ye](e)}[ye](e=null){this.url=e?e.url:void 0,this.meta=e?e.meta:void 0}adoptNode(e){var t;if((t=this.meta)==null?void 0:t.content){for(let s=this.meta.attributes,i=0,o=Object.keys(s),l=o.length,n,a;i<l;i++)n=o[i],a=s[n],e.setAttribute(n,a);e.innerHTML=this.meta.content}return this}toString(){return this.url}toStyleString(){return"url("+this.url+")"}};function ve(r){var e,t;if(r[P])return r[P];if(r.type=="svg")return r[P]||(r[P]=new xe(r));if(r.input){let s=globalThis._MF_&&globalThis._MF_[r.input];return s&&(Object.assign(r,s),r.toString=function(){return this.absPath}),r[P]||(r[P]=R.wrap(r))}return r}var Te=d(require("express"));var Se=ve({input:"entry:app/index.html"});var Pe=(0,Te.default)();Pe.get(/.*/,function(r,e){return r.accepts(["image/*","html"])!="html"?e.sendStatus(404):e.send(Se.body)});be(Pe.listen(process.env.PORT||3e3));
//__FOOT__
//# sourceMappingURL=data:application/json;base64,
